
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)
Loaded SDC plugin

1. Executing Liberty frontend: /nc/apps/pdk/ciel/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/workspace/test_full_adder/runs/RUN_2025-08-19_16-02-41/06-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: /workspace/test_full_adder/FullAdder.v
Parsing SystemVerilog input from `/workspace/test_full_adder/FullAdder.v' to AST representation.
Storing AST representation for module `$abstract\FullAdder'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\FullAdder'.
Generating RTLIL representation for module `\FullAdder'.

4.1. Analyzing design hierarchy..
Top module:  \FullAdder

4.2. Analyzing design hierarchy..
Top module:  \FullAdder
Removing unused module `$abstract\FullAdder'.
Removed 1 unused modules.
Renaming module FullAdder to FullAdder.

5. Generating Graphviz representation of design.
Writing dot description to `/workspace/test_full_adder/runs/RUN_2025-08-19_16-02-41/06-yosys-synthesis/hierarchy.dot'.
Dumping module FullAdder to page 1.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \FullAdder

7.2. Analyzing design hierarchy..
Top module:  \FullAdder
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

14. Executing PROC_MUX pass (convert decision trees to multiplexers).

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module FullAdder...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FullAdder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FullAdder.
Performed a total of 0 changes.

28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

29. Executing OPT_DFF pass (perform DFF optimizations).

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

31. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

32. Executing FSM pass (extract and optimize FSM).

32.1. Executing FSM_DETECT pass (finding FSMs in design).

32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

33. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

34. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FullAdder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FullAdder.
Performed a total of 0 changes.

37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

38. Executing OPT_DFF pass (perform DFF optimizations).

39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

40. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

41. Executing WREDUCE pass (reducing word size of cells).

42. Executing PEEPOPT pass (run peephole optimizers).

43. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

44. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module FullAdder:
  created 0 $alu and 0 $macc cells.

45. Executing SHARE pass (SAT-based resource sharing).

46. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

48. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FullAdder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

49. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FullAdder.
Performed a total of 0 changes.

50. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

51. Executing OPT_DFF pass (perform DFF optimizations).

52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

53. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

54. Executing MEMORY pass.

54.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

54.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

54.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

54.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

54.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

54.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

54.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

54.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

54.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

54.10. Executing MEMORY_COLLECT pass (generating $mem cells).

55. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

56. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

57. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

58. Executing OPT_DFF pass (perform DFF optimizations).

59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

60. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

61. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

63. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FullAdder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

64. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FullAdder.
Performed a total of 0 changes.

65. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

66. Executing OPT_SHARE pass.

67. Executing OPT_DFF pass (perform DFF optimizations).

68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

69. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

70. Executing TECHMAP pass (map to technology primitives).

70.1. Executing Verilog-2005 frontend: /nix/store/9r0bh7sp051dpm8km8bqlb028anpd3v3-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/9r0bh7sp051dpm8km8bqlb028anpd3v3-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

70.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~78 debug messages>

71. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

72. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

73. Executing OPT_DFF pass (perform DFF optimizations).

74. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

75. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

76. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

77. Executing OPT_DFF pass (perform DFF optimizations).

78. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

79. Executing ABC pass (technology mapping using ABC).

79.1. Extracting gate netlist of module `\FullAdder' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 8 wires to a netlist network with 3 inputs and 2 outputs.

79.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

79.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

80. Executing OPT pass (performing simple optimizations).

80.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

80.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

80.3. Executing OPT_DFF pass (perform DFF optimizations).

80.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..
Removed 0 unused cells and 8 unused wires.
<suppressed ~2 debug messages>

80.5. Finished fast OPT passes.

81. Executing HIERARCHY pass (managing design hierarchy).

81.1. Analyzing design hierarchy..
Top module:  \FullAdder

81.2. Analyzing design hierarchy..
Top module:  \FullAdder
Removed 0 unused modules.

82. Executing CHECK pass (checking for obvious problems).
Checking module FullAdder...
Found and reported 0 problems.

83. Printing statistics.

=== FullAdder ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           5
   Number of public wire bits:       5
   Number of ports:                  5
   Number of port bits:              5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $_ANDNOT_                       1
     $_AND_                          1
     $_OR_                           1
     $_XNOR_                         2

84. Generating Graphviz representation of design.
Writing dot description to `/workspace/test_full_adder/runs/RUN_2025-08-19_16-02-41/06-yosys-synthesis/primitive_techmap.dot'.
Dumping module FullAdder to page 1.

85. Executing OPT pass (performing simple optimizations).

85.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

85.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

85.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FullAdder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

85.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FullAdder.
Performed a total of 0 changes.

85.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FullAdder'.
Removed a total of 0 cells.

85.6. Executing OPT_DFF pass (perform DFF optimizations).

85.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..

85.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module FullAdder.

85.9. Finished OPT passes. (There is nothing left to do.)

86. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /workspace/test_full_adder/runs/RUN_2025-08-19_16-02-41/tmp/7d0044c6121148b1929e6f35565cd6fb.lib ",
   "modules": {
      "\\FullAdder": {
         "num_wires":         8,
         "num_wire_bits":     8,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 5,
         "num_ports":         5,
         "num_port_bits":     5,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         5,
         "num_cells_by_type": {
            "$_ANDNOT_": 1,
            "$_AND_": 1,
            "$_OR_": 1,
            "$_XNOR_": 2
         }
      }
   },
      "design": {
         "num_wires":         8,
         "num_wire_bits":     8,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 5,
         "num_ports":         5,
         "num_port_bits":     5,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         5,
         "num_cells_by_type": {
            "$_ANDNOT_": 1,
            "$_AND_": 1,
            "$_OR_": 1,
            "$_XNOR_": 2
         }
      }
}

87. Printing statistics.

=== FullAdder ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           5
   Number of public wire bits:       5
   Number of ports:                  5
   Number of port bits:              5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $_ANDNOT_                       1
     $_AND_                          1
     $_OR_                           1
     $_XNOR_                         2

   Area for cell type $_AND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!

[INFO] Applying tri-state buffer mapping from '/nc/apps/pdk/ciel/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

88. Executing TECHMAP pass (map to technology primitives).

88.1. Executing Verilog-2005 frontend: /nc/apps/pdk/ciel/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/nc/apps/pdk/ciel/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

88.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

89. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/nc/apps/pdk/ciel/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

90. Executing TECHMAP pass (map to technology primitives).

90.1. Executing Verilog-2005 frontend: /nc/apps/pdk/ciel/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/nc/apps/pdk/ciel/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

90.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

91. Executing SIMPLEMAP pass (map simple cells to gate primitives).

92. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

92.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\FullAdder':
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /workspace/test_full_adder/runs/RUN_2025-08-19_16-02-41/tmp/7d0044c6121148b1929e6f35565cd6fb.lib ",
   "modules": {
      "\\FullAdder": {
         "num_wires":         8,
         "num_wire_bits":     8,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 5,
         "num_ports":         5,
         "num_port_bits":     5,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         5,
         "num_cells_by_type": {
            "$_ANDNOT_": 1,
            "$_AND_": 1,
            "$_OR_": 1,
            "$_XNOR_": 2
         }
      }
   },
      "design": {
         "num_wires":         8,
         "num_wire_bits":     8,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 5,
         "num_ports":         5,
         "num_port_bits":     5,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         5,
         "num_cells_by_type": {
            "$_ANDNOT_": 1,
            "$_AND_": 1,
            "$_OR_": 1,
            "$_XNOR_": 2
         }
      }
}

93. Printing statistics.

=== FullAdder ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           5
   Number of public wire bits:       5
   Number of ports:                  5
   Number of port bits:              5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $_ANDNOT_                       1
     $_AND_                          1
     $_OR_                           1
     $_XNOR_                         2

   Area for cell type $_AND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!

[INFO] Using generated ABC script '/workspace/test_full_adder/runs/RUN_2025-08-19_16-02-41/06-yosys-synthesis/AREA_0.abc'â€¦

94. Executing ABC pass (technology mapping using ABC).

94.1. Extracting gate netlist of module `\FullAdder' to `/tmp/yosys-abc-DK1jH3/input.blif'..
Extracted 5 gates and 8 wires to a netlist network with 3 inputs and 2 outputs.

94.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-DK1jH3/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-DK1jH3/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-DK1jH3/input.blif 
ABC: + read_lib -w /workspace/test_full_adder/runs/RUN_2025-08-19_16-02-41/tmp/7d0044c6121148b1929e6f35565cd6fb.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/workspace/test_full_adder/runs/RUN_2025-08-19_16-02-41/tmp/7d0044c6121148b1929e6f35565cd6fb.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /workspace/test_full_adder/runs/RUN_2025-08-19_16-02-41/06-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /workspace/test_full_adder/runs/RUN_2025-08-19_16-02-41/06-yosys-synthesis/AREA_0.abc 
ABC: Error: The network is combinational.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =      5 ( 20.0 %)   Cap = 16.0 ff (  2.5 %)   Area =       51.30 ( 80.0 %)   Delay =   517.29 ps  ( 40.0 %)               
ABC: Path  0 --       1 : 0    2 pi                       A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  13.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --       8 : 2    2 sky130_fd_sc_hd__xnor2_2 A =  16.27  Df = 203.1  -63.6 ps  S = 219.5 ps  Cin =  8.5 ff  Cout =  13.2 ff  Cmax = 121.8 ff  G =  149  
ABC: Path  2 --       9 : 2    1 sky130_fd_sc_hd__xnor2_2 A =  16.27  Df = 517.3  -26.8 ps  S = 453.1 ps  Cin =  8.5 ff  Cout =  33.4 ff  Cmax = 121.8 ff  G =  394  
ABC: Start-point = pi0 (\b_i).  End-point = po0 (\sum_o).
ABC: netlist                       : i/o =    3/    2  lat =    0  nd =     5  edge =     10  area =51.31  delay = 2.00  lev = 2
ABC: + write_blif /tmp/yosys-abc-DK1jH3/output.blif 

94.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

95. Executing SETUNDEF pass (replace undef values with defined constants).

96. Executing HILOMAP pass (mapping to constant drivers).

97. Executing SPLITNETS pass (splitting up multi-bit signals).

98. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FullAdder..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

99. Executing INSBUF pass (insert buffer cells for connected wires).

100. Executing CHECK pass (checking for obvious problems).
Checking module FullAdder...
Found and reported 0 problems.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /workspace/test_full_adder/runs/RUN_2025-08-19_16-02-41/tmp/7d0044c6121148b1929e6f35565cd6fb.lib ",
   "modules": {
      "\\FullAdder": {
         "num_wires":         8,
         "num_wire_bits":     8,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 5,
         "num_ports":         5,
         "num_port_bits":     5,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         5,
         "area":              51.299200,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__inv_2": 1,
            "sky130_fd_sc_hd__nand2_2": 1,
            "sky130_fd_sc_hd__o21ai_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 2
         }
      }
   },
      "design": {
         "num_wires":         8,
         "num_wire_bits":     8,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 5,
         "num_ports":         5,
         "num_port_bits":     5,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         5,
         "area":              51.299200,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__inv_2": 1,
            "sky130_fd_sc_hd__nand2_2": 1,
            "sky130_fd_sc_hd__o21ai_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 2
         }
      }
}

101. Printing statistics.

=== FullAdder ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           5
   Number of public wire bits:       5
   Number of ports:                  5
   Number of port bits:              5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     sky130_fd_sc_hd__inv_2          1
     sky130_fd_sc_hd__nand2_2        1
     sky130_fd_sc_hd__o21ai_2        1
     sky130_fd_sc_hd__xnor2_2        2

   Chip area for module '\FullAdder': 51.299200
     of which used for sequential elements: 0.000000 (0.00%)

102. Executing Verilog backend.
Dumping module `\FullAdder'.

103. Executing JSON backend.
